                                   Program                         
          import os
import time
from datetime import datetime
class File:
    def init(self, name, modified_time):
        self.name = name
        self.modified_time = modified_time
class TextFile(File):
    def init(self, name, modified_time):
        super().init(name, modified_time)
def get_type(self):
        return "Text File"
class ImageFile(File):
    def init(self, name, modified_time):
        super().init(name, modified_time)
 def get_type(self):
        return "Image File"
class PythonScript(File):
    def init(self, name, modified_time):
        super().init(name, modified_time)
def get_type(self):
        return "Python Script"
class DocumentMonitor:
    def init(self, folder_path):
        self.folder_path = folder_path
        self.snapshot_time = None
        self.snapshot_files = {}
        self.last_detection_time = None
  def create_snapshot(self):
        self.snapshot_time = datetime.now()
        self.snapshot_files = self._get_files_info()
  def commit(self):
        self.create_snapshot()
 def detect_changes(self):
        current_files = self._get_files_info()
 for file_name, file_info in current_files.items():
            if file_name in self.snapshot_files:
                if file_info != self.snapshot_files[file_name]:
                    print(file_name, "Changed")
            else:
                print(file_name, "New File")

        for file_name in self.snapshot_files:
            if file_name not in current_files:
                print(file_name, "Deleted")
 def _get_files_info(self):
        files_info = {}
        for file_name in os.listdir(self.folder_path):
            if os.path.isfile(os.path.join(self.folder_path, file_name)):
                modified_time = os.path.getmtime(os.path.join(self.folder_path, file_name))
                files_info[file_name] = modified_time
        return files_info
 def schedule_detection(self):
        while True:
            time.sleep(5)
            print("Running detection flow...")
            self.detect_changes()
  def start(self):
        self.create_snapshot()
        self.last_detection_time = datetime.now()
        print("Initial snapshot created.")
     # Start scheduler in a separate thread
        import threading
        scheduler_thread = threading.Thread(target=self.schedule_detection)
        scheduler_thread.start()
  # Metoda info pentru a afișa informații despre un anumit fișier
    def info(self, filename):
